body{
    display: flex;
    height: 100vh;
    margin: 10px;
    font-family: sans-serif;
}

.container{
    margin: auto;
    width: 60%;
    height: 80%;   
    display: grid;
    grid-gap: 4px;

    grid-template-rows: 50px auto auto 50px;
    grid-template-columns: 20% 80%;

    /* Une autre manière d'organiser sa grille est de définir des "areas".

    Le grid-template-areas doit correspondre au template définit plus haut.
    Ici, on a définit 4 lignes et 2 colonnes, on aura donc un template-area
    constitué lui aussi de 4 lignes et 2 colonnes :

            |    1-Column    2-Column
    ----------------------------------
    1-Row   |     Element     Element
    2-Row   |     Element     Element
    3-Row   |     Element     Element
    4-Row   |     Element     Element

    On aura donc le "grid-template-areas" suivant :
        "Element Element"
        "Element Element"
        "Element Element"
        "Element Element";

    Ne reste plus qu'à renommer chaque élément et ensuite
    à les assigner à ce que l'on souhaite.
    */
    grid-template-areas: 
        "h h"
        "m a"
        "m c"
        "f f";
    /* Ici, je nomme les éléments comme ceci :
        - h pour Header
        - m pour Menu
        - f pour Footer
        - a pour Article
        - c pour Contenu
    */
}


.header{
    /* On indique que le header occupera tout l'espace représenté par les h */
    grid-area: h;
}

.menu{
    /* On indique que le menu occupera tout l'espace représenté par les m */
    grid-area: m;
}

.featured{
    /* On indique que l'article principal occupera tout l'espace représenté par les a */
    grid-area: a;
}

.footer{
    /* On indique que le footer occupera tout l'espace représenté par les f */
    grid-area: f;
}

.articles{
    /* On indique que la liste d'articles occupera tout l'espace représenté par les c */
    grid-area: c;

    /* Pour l'exemple, j'en profite pour montrer qu'il est 
    possible d'imbriquer une grille dans une grille.
     */
    display: grid !important;
    /* Le "!important" est là pour forcer le display en grid
    car un sélecteur d'avantage prioritaire (".container > div")
    passait le display en flex. */

    grid-gap: 8px;
    grid-template: repeat(3, auto) / 50% 50%;
}


.content{
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;

    grid-column: span 1;
    grid-row: span 1;

    background-color: rgb(15, 129, 206);
    opacity: 0.5;
}

.content:hover{
    opacity: 1;
}


.container > div{
    display: flex;
    justify-content: center;
    align-items: center;

    padding: 10px;
    font-size: 2em;
    color: white;
    background-color: rgb(168, 138, 206);
    opacity: 0.5;
}


/* Les lignes qui suivent servent à colorer différenmment les éléments */
.container > div:nth-child(3){
    background-color: rgb(15, 129, 206);
}
.container > div:first-child,
.container > div:last-child{
    background-color: rgb(218, 135, 28);
}
.container > div:nth-child(2){
    background-color: rgb(30, 179, 0);
}

.container > div:hover{
    opacity: 1;
}