body{
    display: flex;
    height: 100vh;
    margin: 10px;
    font-family: sans-serif;
}

.container{
    margin: auto;
    width: 60%;
    display: grid;
    grid-gap: 4px;
    
    /* Remarquez qu'il n'y a plus de "grid-template-columns" et de "grid-template-rows", 
    mais uniquement un grid-template...
    En fait, il s'agit d'une autre manière (raccourci) qui permet d'écrire les deux en uns.
    Dans le "grid-template", 
    les paramètres se trouvant devant le "/" concernent les lignes (rows)
    et les paramètres se trouvant derrière le "/" concernant les colonnes (columns).

    Cette manière de définir un tableau est plus concisse que la précédente, 
    mais un peu plus confuse à la lecture.
    Elle n'est pas plus bonne ou plus mauvaise que la manière précédente,
    choissisez simplement celle que vous trouvez la plus pratique. 
    
    Ici donc, on définit une grille qui aura :
        - Des lignes de 50 px de hauteur;
        - Et 4 colonnes donc la première aura une largeur de 4fr, 
          et les trois suivante une largeur de 1fr.
    */
    grid-template: 50px /  4fr repeat(3, 1fr);

    /* Comment fonctionne le repeat ici ?
    À l'intérieur d'un repeat, entre parenthèse, on inscrit deux paramètres :
        - Le premier indique le nombre de répétition;
        - Le second indique la dimension à appliquer à chacune des répétitions.
    Ainsi, puisqu'ici nous nous trouvons dans les paramètres concernant 
    les colonnes (rappellez-vous, après le "/"), nous indiquons que nous voulons
    une première colonne faisans 4 fractions de large, 
    suivit par 3 colonnes faisant chacune 1 fraction de large.

    Ecrire "4fr repeat(3, 1fr)" revient exactement au même 
    qu'écrire "4fr 1fr 1fr 1fr", il s'agit encore une fois d'un raccourci plutôt pratique.
    */
    
}

.container > div{
    padding: 10px;
    font-size: 2em;
    text-align: center;
    color: white;

    opacity: 0.5;
}


/* Les lignes qui suivent servent à colorer différenmment les éléments */
.container > div:nth-child(1n){
    background-color: rgb(218, 135, 28);
}
.container > div:nth-child(2n){
    background-color: rgb(15, 129, 206);
}
.container > div:nth-child(4n - 1){
    background-color: rgb(151, 84, 240);
}
/* .container > div:nth-child(4n){
    background-color: rgb(30, 179, 0);
} */

.container > div:hover{
    opacity: 1;
}